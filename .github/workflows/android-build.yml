name: Build Android APK (Capacitor) - Robust

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  ANDROID_SDK_ROOT: /opt/android/sdk
  ANDROID_BUILD_TOOLS: '33.0.2'
  ANDROID_PLATFORMS: 'platforms;android-33'
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx1536m"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node dependencies (ci)
        run: |
          npm ci --no-audit --prefer-offline

      - name: Build web (React) â€” create build/ folder
        run: |
          echo "Running npm run build"
          npm run build --if-present
          echo "build list:"
          ls -la build || true

      - name: Setup Java (Temurin 11)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install basic OS tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip zip curl wget git jq openjdk-11-jdk

      - name: Install Android command-line tools & SDK packages
        run: |
          set -x
          sudo mkdir -p $ANDROID_SDK_ROOT
          sudo chown $USER $ANDROID_SDK_ROOT
          cd $ANDROID_SDK_ROOT
          curl -sSOL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -o commandlinetools-linux-9477386_latest.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/tools
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
            mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/tools/ || true
          fi
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/tools/bin:$PATH
          which sdkmanager || echo "sdkmanager not found in PATH"
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install "platform-tools" "${{ env.ANDROID_PLATFORMS }}" "build-tools;${{ env.ANDROID_BUILD_TOOLS }}" || true
          yes | sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT || true
          ls -la $ANDROID_SDK_ROOT || true

      - name: Ensure Capacitor CLI available
        run: |
          set -x
          npm install @capacitor/core @capacitor/cli || true
          npx cap --version || true

      - name: Ensure capacitor config exists (create minimal if missing)
        run: |
          set -x
          if [ ! -f capacitor.config.json ] && [ ! -f capacitor.config.ts ]; then
            echo '{"appId":"com.yourdomain.qapbaz","appName":"QapBaz","webDir":"build"}' > capacitor.config.json
            echo "Created minimal capacitor.config.json"
          else
            echo "capacitor.config exists"
          fi
          cat capacitor.config.json || true

      - name: Add Android platform (create android/ if missing)
        run: |
          set -x
          if [ ! -d "android" ]; then
            echo "Adding android platform via Capacitor"
            npx cap add android || true
          else
            echo "android/ already present"
          fi
          echo "List android folder:"
          ls -la android || true

      - name: Copy web assets to native project
        run: |
          set -x
          if [ ! -d "build" ]; then
            echo "build/ missing, running npm run build"
            npm run build --if-present || true
          fi
          echo "build/ contents:"
          ls -la build || true
          npx cap copy android || true
          echo "android folder after copy:"
          ls -la android || true

      - name: Make gradlew executable (fail if missing)
        run: |
          set -x
          if [ -f android/gradlew ]; then
            chmod +x android/gradlew
            echo "gradlew is executable"
          else
            echo "ERROR: android/gradlew not found. npx cap add android probably failed."
            echo "Listing android dir:"
            ls -la android || true
            exit 1
          fi

      - name: Print env (debug)
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          java -version || true
          echo "PATH=$(echo $PATH | tr ':' '\n' | sed -n '1,200p')"

      - name: Build Android (try debug -> release)
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -x
          echo "Gradle version:"
          ./gradlew -v || true
          echo "Attempt assembleDebug (no signing required):"
          ./gradlew clean assembleDebug --stacktrace --info --no-daemon || true
          echo "Check outputs for debug APK:"
          ls -la app/build/outputs/apk/debug || true
          echo "Attempt assembleRelease (may need keystore):"
          ./gradlew assembleRelease --stacktrace --info --no-daemon || true
          echo "Check outputs for release APK:"
          ls -la app/build/outputs/apk/release || true

      - name: Upload APKs (debug & release if exist)
        uses: actions/upload-artifact@v4
        with:
          name: qapbaz-apks
          path: |
            android/app/build/outputs/apk/release/*.apk
            android/app/build/outputs/apk/debug/*.apk
